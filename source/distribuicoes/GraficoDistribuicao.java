/*
 * Copyright 2014 Denison.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package distribuicoes;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Denison
 */
public class GraficoDistribuicao extends javax.swing.JFrame {

    private final Map<Integer, Integer> densidade;
    private final int TAMANHO = 10000;

    /**
     * Creates new form GraficoDistribuicao
     */
    public GraficoDistribuicao() {
        densidade = new HashMap();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonUniforme = new javax.swing.JButton();
        jButtonNormal = new javax.swing.JButton();
        jButtonExponencial = new javax.swing.JButton();
        jButtonPoisson = new javax.swing.JButton();
        jButtonWeibull = new javax.swing.JButton();
        jPanel1 = new JPanel() {
            @Override
            public void paint(Graphics g) {
                desenhar(g);
            }
        };
        jCheckBoxSet = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButtonUniforme.setText("Uniforme");
        jButtonUniforme.setFocusable(false);
        jButtonUniforme.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonUniforme.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonUniforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUniformeActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonUniforme);

        jButtonNormal.setText("Normal");
        jButtonNormal.setFocusable(false);
        jButtonNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNormalActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNormal);

        jButtonExponencial.setText("Exponencial");
        jButtonExponencial.setFocusable(false);
        jButtonExponencial.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonExponencial.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonExponencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExponencialActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonExponencial);

        jButtonPoisson.setText("Poisson");
        jButtonPoisson.setFocusable(false);
        jButtonPoisson.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPoisson.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPoisson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPoissonActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonPoisson);

        jButtonWeibull.setText("Weibull");
        jButtonWeibull.setFocusable(false);
        jButtonWeibull.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonWeibull.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonWeibull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWeibullActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonWeibull);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 505, Short.MAX_VALUE)
        );

        jCheckBoxSet.setText("Set values");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSet))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxSet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNormalActionPerformed
        Distribution gerador = new Distribution();
        ArrayList<Integer> sort = new ArrayList();
        Integer number = TAMANHO;
        Double media = 300.0;
        Double desvio = 20.0;
        if (jCheckBoxSet.isSelected()) {
            try {
                String temp = JOptionPane.showInputDialog(this, "Set average:");
                media = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set standard deviation:");
                desvio = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set number of points");
                number = Integer.valueOf(temp);
                if (number < 1) {
                    number = TAMANHO;
                    throw new NumberFormatException("Number must be positive!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Could not convert:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Realiza sorteio
        for (int i = 0; i < number; i++) {
            //Normal
            sort.add((int) gerador.nextNormal(media, desvio));
        }
        gerarDensidade(sort, number);
    }//GEN-LAST:event_jButtonNormalActionPerformed

    private void jButtonExponencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExponencialActionPerformed
        Distribution gerador = new Distribution();
        ArrayList<Integer> sort = new ArrayList();
        Double lambda = 30.0;
        int number = TAMANHO;
        if (jCheckBoxSet.isSelected()) {
            try {
                String temp = JOptionPane.showInputDialog(this, "Set lambda:");
                lambda = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set number of points");
                number = Integer.valueOf(temp);
                if (number < 1) {
                    number = TAMANHO;
                    throw new NumberFormatException("Number must be positive!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Could not convert:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Realiza sorteio
        for (int i = 0; i < number; i++) {
            //Normal
            sort.add((int) gerador.nextExponential(lambda));
        }
        gerarDensidade(sort, number);
    }//GEN-LAST:event_jButtonExponencialActionPerformed

    private void jButtonUniformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUniformeActionPerformed
        Distribution gerador = new Distribution();
        ArrayList<Integer> sort = new ArrayList();
        int interval = 590;
        int number = TAMANHO;
        if (jCheckBoxSet.isSelected()) {
            try {
                String temp = JOptionPane.showInputDialog(this, "Set interval 0 to:");
                interval = Integer.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set number of points");
                number = Integer.valueOf(temp);
                if (number < 1) {
                    number = TAMANHO;
                    throw new NumberFormatException("Number must be positive!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Could not convert:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Realiza sorteio
        for (int i = 0; i < number; i++) {
            //Normal
            sort.add(gerador.nextInt(interval));
        }
        gerarDensidade(sort, number);
    }//GEN-LAST:event_jButtonUniformeActionPerformed

    private void jButtonPoissonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPoissonActionPerformed
        Distribution gerador = new Distribution();
        ArrayList<Integer> sort = new ArrayList();
        Double lambda = 40.0;
        Integer number = TAMANHO;
        if (jCheckBoxSet.isSelected()) {
            try {
                String temp = JOptionPane.showInputDialog(this, "Set lambda:");
                lambda = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set number of points");
                number = Integer.valueOf(temp);
                if (number < 1) {
                    number = TAMANHO;
                    throw new NumberFormatException("Number must be positive!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Could not convert:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Realiza sorteio
        for (int i = 0; i < number; i++) {
            //Normal
            sort.add(gerador.nextPoisson(lambda));
        }
        gerarDensidade(sort, number);
    }//GEN-LAST:event_jButtonPoissonActionPerformed

    private void jButtonWeibullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWeibullActionPerformed
        Distribution gerador = new Distribution();
        ArrayList<Integer> sort = new ArrayList();
        Integer number = TAMANHO;
        Double scale = 60.0;
        Double shape = 1.5;
        if (jCheckBoxSet.isSelected()) {
            try {
                String temp = JOptionPane.showInputDialog(this, "Set scale:");
                scale = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set shape:");
                shape = Double.valueOf(temp);
                temp = JOptionPane.showInputDialog(this, "Set number of points");
                number = Integer.valueOf(temp);
                if (number < 1) {
                    number = TAMANHO;
                    throw new NumberFormatException("Number must be positive!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Could not convert:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Realiza sorteio
        for (int i = 0; i < number; i++) {
            //Normal
            sort.add((int) gerador.nextWeibull(scale, shape));
        }
        gerarDensidade(sort, number);
    }//GEN-LAST:event_jButtonWeibullActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficoDistribuicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficoDistribuicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficoDistribuicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficoDistribuicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficoDistribuicao().setVisible(true);
            }
        });
    }

    public void desenhar(Graphics g) {
        g.setColor(Color.white);
        g.fillRect(0, 0, 610, 510);
        g.setColor(Color.blue);
        g.drawString("0", 0, 500);
        g.drawLine(0, 487, 600, 487);
        g.drawString("VALOR", 300, 500);
        g.drawString("E", 1, 220);
        g.drawString("V", 1, 231);
        g.drawString("E", 1, 242);
        g.drawString("N", 1, 253);
        g.drawString("T", 1, 264);
        g.drawString("O", 1, 275);
        g.drawString("S", 1, 286);
        g.drawLine(10, 0, 10, 500);
        g.setColor(Color.red);
        for (Map.Entry<Integer, Integer> entrySet : densidade.entrySet()) {
            Integer valor = entrySet.getKey();
            Integer repete = entrySet.getValue();
            g.drawString("°", valor + 10, 490 - repete);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExponencial;
    private javax.swing.JButton jButtonNormal;
    private javax.swing.JButton jButtonPoisson;
    private javax.swing.JButton jButtonUniforme;
    private javax.swing.JButton jButtonWeibull;
    private javax.swing.JCheckBox jCheckBoxSet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void gerarDensidade(ArrayList<Integer> sort, int tam) {
        Collections.sort(sort);
        //Insere na densidade
        densidade.clear();
        for (int i = 0; i < tam; i++) {
            int valor = sort.get(i);
            if (densidade.containsKey(valor)) {
                densidade.put(valor, densidade.get(valor) + 1);
            } else {
                densidade.put(valor, 1);
            }
        }
        jPanel1.repaint();
    }
}
